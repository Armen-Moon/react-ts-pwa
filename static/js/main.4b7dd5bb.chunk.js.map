{"version":3,"sources":["serviceWorker.ts","test/index.tsx","App.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","caches","keys","then","names","name","delete","console","log","process","navigator","URL","href","origin","addEventListener","swUrl","fetch","headers","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","Test","props","App","version","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAYMA,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DASG,SAASC,EAASC,GAKvB,GAJAC,OAAOC,OAAOC,MAAK,SAAUC,GAAQ,IAAD,gBACjBA,GADiB,IAClC,gCAASC,EAAT,QAAwBJ,OAAOK,OAAOD,IADJ,kCAGpCE,QAAQC,IAAIC,EAAS,WACwB,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIC,IACpBF,gBACAd,OAAOC,SAASgB,MAEJC,SAAWlB,OAAOC,SAASiB,OAIvC,OAGFlB,OAAOmB,iBAAiB,QAAQ,WAC9B,IAAMC,EAAK,UAAMN,gBAAN,sBAEPhB,IAgEV,SAAiCsB,EAAef,GAE9CgB,MAAMD,EAAO,CACXE,QAAS,CAAE,iBAAkB,YAE5Bd,MAAK,SAAAe,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CZ,UAAUa,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,aAAavB,MAAK,WAC7BR,OAAOC,SAAS+B,eAKpBC,EAAgBb,EAAOf,MAG1B6B,OAAM,WACLtB,QAAQC,IACN,oEAvFAsB,CAAwBf,EAAOf,GAI/BU,UAAUa,cAAcC,MAAMrB,MAAK,WACjCI,QAAQC,IACN,iHAMJoB,EAAgBb,EAAOf,OAM/B,SAAS4B,EAAgBb,EAAef,GACtCU,UAAUa,cACPxB,SAASgB,GACTZ,MAAK,SAAAsB,GACJA,EAAaM,cAAgB,WAC3B,IAAMC,EAAmBP,EAAaQ,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfzB,UAAUa,cAAca,YAI1B7B,QAAQC,IACN,iHAKER,GAAUA,EAAOqC,UACnBrC,EAAOqC,SAASZ,KAMlBlB,QAAQC,IAAI,sCAGRR,GAAUA,EAAOsC,WACnBtC,EAAOsC,UAAUb,WAO5BI,OAAM,SAAAU,GACLhC,QAAQgC,MAAM,4CAA6CA,S,qKC9FlDC,G,YAR8B,SAACC,GAC1C,OACI,mC,OCMOC,MATf,WAIE,OAFAnC,QAAQC,IAAI,aAAcmC,KAGxB,kBAAC,EAAD,O,OCJJC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAM1BzB,Q","file":"static/js/main.4b7dd5bb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  caches.keys().then(function (names) {\r\n    for (let name of names) caches.delete(name);\r\n  });\r\n  console.log(process, 'process');\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import * as React from 'react';\r\n\r\ninterface Props {\r\n    count?: number;\r\n}\r\n\r\nconst Test: React.FunctionComponent<Props> = (props) => {\r\n    return (\r\n        <>\r\n            {/* <img src=\"https://images.unsplash.com/photo-1586468801912-2b17c93527f0?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1950&q=80\" alt=\"\" /> */}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Test;","import React from 'react';\nimport './App.css';\nimport Test from './test';\nimport { version } from '../package.json';\n\nfunction App() {\n\n  console.log('version =>', version);\n\n  return (\n    <Test />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}